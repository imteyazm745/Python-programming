
# Check the Python Version on the computer;
import sys
print(sys.version)

Variable:  
A variable is basically nothing but the name of a memory location that we use for storing data. 
We can change the value of a variable in C or any other language, and we can also reuse it multiple times.

Creating a Variable:  
checkingAccount = 500
savingsAccount = 1000

# add 100 to our savings (Yeah!)
savingsAccount = savingsAccount + 100

# remove 50 from our checkingaccount (Sniff)
checkingAccount = checkingAccount - 50

# calculate the number of days to save to reach 5000
numberDaysSave = (5000 - checkingAccount) / 500

# update our checkingaccount (again) after the daily gains/losses
checkingAccount = checkingAccount + (30 - 10) * 7
Lines starting with a # are comments. They are used to document your code and help others understand it.
The other lines of code (which can run operations, declarations, etc.) are expressions. They tell the computer what to do.
each of the expressions assigns a value to a variable. The assignment operator is   = .
To the right of the assignment operator is the expression that will create/calculate a value.
To the left of the assignment operator, you write the name of the variable to which you will assign the corresponding value.

There are also other arithmetic operators that are a little more complex, but nevertheless useful, such as:
% modulo : returns the remainder of the euclidean division
** power : raises a number to a certain power
// integer division: calculates the integer division (rounded down)
print(SavingsAccount % 500) # -> 100
# 1100 = 500 * 2 + 100, so 1100 % 500 = remainder = 100
print(9 ** 3) # -> 729, 9*9*9 = 729
print(SavingsAccount // 500) # -> 2
# 1100 = 500 * 2 + 100, so 1100 // 500 = integer division result = 2*
Shorter Code
# long version
savingsAccount = savingsAccount + 100

# equivalent short version
savingsAccount += 100
Naturally, there is a version for each arithmetic operator seen previously:
-=  for subtraction
*=  for multiplication
/=  for division
%=  for the remainder of the integer division

Let's Recap
In this chapter, you have learned the basics about variables:
A variable is made up of two parts: its name and its value.
Assigning a value to a variable is called an assignment.
The value of a variable can be changed.
The type of a variable depends on its value.
The names of your variables should be clear, explicit, and should follow a typographic convention.

Mix Several Numeric Variables
a = 7.5
b = 3
c = a/b
print(c)
# this will print 2.5, which is a float

a = 10
b = 5
c = a/b
print(c)
# it's a float

Concatenation:
However, you can force the conversion of a variable into a well-defined type. This is called typecasting because doing 
so you are changing (casting) the type of a variable. To do this, you will need the corresponding functions:
a = 14.0
# a is a float

a = int(a)
print(a)
# a is now an integer: it prints 14 and not 14.0

Character Strings:
character strings are string types in Python, assembling several strings together is called concatenation. 

favoriteCityOne = "San Francisco"
favoriteCityTwo = "New York"
favorites = favoriteCityOne + favoriteCityTwo
print(favorites) # => "San FranciscoNew York"
favorites1 = "My favorite cities are " + favoriteCityOne + " and "+ favoriteCityTwo
print(favorites1) # -> "My favorite cities are San Francisco and New York"

However, you cannot concatenate other types of variables with strings, such as numeric variables---this would return an error. 
To remedy this, you will need to cast your numeric variable to a string, via the  str()  function:

city = "Sydney"
numberTrips = 5
history = "I've been to " + city + " " + str(numberTrips) + " times "
print(history) # => "I've been to Sydney 5 times"

Let's Recap:
There are three primitive types of variables, such as  integers, float, strings
We have also seen how to use these different types:
  You can perform numeric operations on numeric variables of different types.
  You can cast variables to force the transformation of the type of a variable into another specific type, according to your needs.
  Strings can be assembled together: this is called concatenation.

Function:
Functions can group several statements in a block which will be called using a name.
Functions are not specific to Python; they are present in all computer languages. They can:
reuse a portion of code already written just by stating the function name—so you don't have to rewrite the whole portion of code each time.
simplify code and make it more readable!

There are many pre-existing functions in Python! In addition to those already seen, there are, for example:
len() :  a function that returns the length of an item. Do you remember strings? Using this function on a string tells you how many characters the string contains.
type() : lets you print the type of a variable.
pow(a, b) : lets you calculate a to the power of b. It is equivalent to writing a**b.
abs() :  returns the absolute value of a number.
a="apple"
print(len(a)) #5
print(type(a)) #<class 'str'>
print(pow(4,2)) #16
print(abs(-100)) #100
Write your own function:
A function is defined via the keyword   def  followed by the name of the function. All the statements associated with this function will then be written after the colon.
def functionName():
    # statements
    # that can go
    # on several
    # lines
Note that all the statements associated with your function are offset in the code: this is called indentation.
Now define a function that would answer your problem:
def printPerimeter():
    dimension1 = 6
    dimension2 = 4
    dimension3 = 3
    perimeter = dimension1 + dimension2 + dimension3
    print(perimeter)
printPerimeter() # => 13
This function is correct, but not entirely useful: not all of your triangles will have the exact same dimensions.

Define the Parameters:
To overcome this limitation, you must make your function accept external numbers. You can do this by defining parameters.
In Python, parameters, just like the name of the function, are defined when the function is written. This is how it would look with the above example:
def printPerimeter(dimension1, dimension2, dimension3):
    perimeter = dimension1 + dimension2 + dimension3
    print(perimeter)
printPerimeter(10, 11, 4) # => 25
printPerimeter(2, 2, 3.5) # => 7.5
Parameters are variables declared in a function. The values that are passed as parameters are called arguments.
Often, when you use a function in a code, you expect an answer that you can reuse to move forward in the code. This answer can be provided via the value returned by a function.

Define a Return Value
To define a return value, you must explicitly use the return keyword at the end of your function.
You could change your printPerimeter  function into calculatePerimeter which will return 
the perimeter of a triangle, according to the length of its three sides, so that it can be reused afterwards:
def calculatePerimeter(dimension1, dimension2, dimension3):
    perimeter = dimension1 + dimension2 + dimension3
    return perimeter
# Once you have defined your function, you can use it as many times as necessary:
perimeter1 = calculatePerimeter(6, 4, 3)
perimeter2 = calculatePerimeter(10, 3, 11)
print("The perimeter of my first triangle is", perimeter1, "and that of my second is", perimet

Use the help function if you forget:
Sometimes you often remember the name of a function, but not necessarily what it does or its arguments, etc. 
Don’t panic! The help function is there for that! If you run help(funtionName), this will print the documentation of this function summarizing:
its purpose.
recommendations for use.
the list and description of the parameters.
sometimes even examples.

Let's Recap
In this chapter we have learnt that:
functions can have parameters and return values.
a return value is the result of running the function. The return value is returned to the code that called the function, to be used as needed.
The parameters are the data necessary for a function to be run and generate a result.
parameters are variables defined by a name. Parameters are specified in the function declaration.
when using a function, you pass it different values as parameters. These values are called arguments.
you can use the help function to print the documentation of a given function.

OOPS:
Python is an object-oriented programming language—this means that in Python, everything is an object!
In programming, this concept of a group or category of objects is called a class. 
A class can be considered as the construction diagram for an object that will define the characteristics of all objects of this type and their features. 
From this class, you will be able to create different models of an object.
Let's take a concrete example with a Car class. The plan of a car can be defined by:
its characteristics, called attributes: it must have four wheels, a color, a shape, an engine power, etc.
its functionalities, called methods: it can drive, brake, etc.
So, from this plan, you can create different car models:
An ordinary family car, green, medium power (110 hp)
A sports car, red, relatively powerful (180 hp)
A small blue city car, not very powerful (90 hp)
etc.
And no matter what the car model, they are all capable of driving or braking, but not with the same performance!
In summary, a class is the outline of an object, defining its attributes and methods. 
From the same class, you can therefore create several objects of the same type, but with different attributes—these are called class instances.

Focus on Methods:
A class method is a function that is only available for the instances of this class. 
If, for example, we consider the Car class presented above having a drive() method, and a Plane class having a fly() method, 
you will agree quite logically that a plane can’t drive, and a car can’t fly. The same goes for our various objects!
The use of a method is always done via the   variableName.method()  notation. 
For example, strings have a method called   lower()  which will transform all the text contained in an object into lower case. Here's how to use it:

Strings Methods:
Python has implemented many methods to allow us to do all this. Here are the most common ones:
upper() :  returns the whole text in upper case.
lower(): returns the whole text in lower case.
capitalize() :  returns the whole text in lowercase with the first letter capitalized.
replace(old, new) :  this method takes two arguments: old and new, both of which are strings.  The method returns the original string with all occurrences of old replaced with new. 
find(string)  returns either the index of the first occurrence of the string passed in the  argument, or -1 if it does not find it.

Here are some examples of how these methods are used:
text = “here is an EXAMPLE of a STRING”
a = text.upper()
b = text.lower()
print(a)
print(b)
print(text.capitalize())
print(text.replace(‘EXAMPLE’, ‘test’))
print(text.find(‘an’)
print(text.find(‘two’)
Output:
HERE IS AN EXAMPLE OF A STRING
here is an example of a string
Here is an example of a string
Here is an test of a STRING
8
-1

Let's Recap:
A class is a construction plan for an object.
A variable is an instance of a class or an object.
An object is defined by its attributes.
All instances of a class have access to the same methods via the.  (dot) notation.
A method, like a function, generally does not modify the initial object.

Collections: Types => Lists and Dictionaries
If you want to analyze several customers at once, you can imagine that you need a variable for each customer. For the names, this could look like this:
customerName1 = 'Marion Weaver'
customerName2 = 'Alberto Mendoza'
customerName3 = 'Katharine Tyler'
customerName4 = 'Isaac Steele'
# etc.
If you have 10 customers to analyze, wouldn't it be easier to store them all in a single variable that would contain all the information?
You're in luck! Python offers a structure, a class capable of storing multiple pieces of information as a kind of array. This structure is called a list. Let's see how to use it.

Lists:
Lists are objects that can contain a collection of objects of any type. a list containing floats, a list containing strings, or even a list mixing objects of different types.
Lists are ordered objects, i.e., each item of the list is associated with a number corresponding to its order in the list. 
This number is called an index and it starts at 0 (not 1!). The first item is therefore associated with index 0, the second with index 1, etc.
Declaring a list is quite similar to the declaration of any variable seen so far: via a name to which we associate a list of items to be stored in this name.
For example, here is the list containing the names of four customers:
customerName = ['Marion Weaver', 'Alberto Mendoza', 'Katharine Tyler', 'Isaac Steele']
Now that your list is created, you can perform two basic operations:
Access a value at a given index
Change the value at a given index
In both cases, the code consists of the name of the variable followed by  [, the value of the index and  ].
For example, if you made a mistake on the name of the first customer and you want to correct their name:
# assign the value 'Marianne Weaver' to the first name in our list
# it is index 0, because indices start at 0 in python!
customerName[0] = 'Marianne Weaver'
To print it, you can write the following line:
print(customerName[0])

Python also lets you use negative indices to access or modify an item. The index -1 corresponds to the last item of the list,
-2 to the second last, and so on. You can also access an index range by using the:  operator. For example, 1:3 will let you access items two to four.
# print the last item
print(customerName[-1])

# access the second item to the 3rd
print(customerName[1:3])

# access all items from the beginning to the second
print(customerName[:2])
Here you have manipulated lists of strings, but you can do the same thing with the amount in each individual's account:
amountAccount = [10000, 150, 300, 1800.74]
For example, the following list is completely valid:
strangeList = [4, 10.2, 'Marion Weaver', ['another list', 1]]
# print the 4th item of the list
print(strangeList[3])

List Methods:
Here are some other methods that are essential to know about lists:
append(): to add the values in the list, and append() takes exactly one argument. Append only adds one element to the list.
insert  to insert a new item at a specific position. For example,   list.insert(1, 12)  will insert the integer 12 at index 1, moving the old item 1 to index 2 and so on.
extend:  similar to append, but with another list. This allows you to concatenate several lists together.
remove: searches for the given item in the list and deletes the first occurrence. For example, if you want to delete 5 from your list, you can use:  list.remove(5) .
index: this method lets you find the index of the first occurrence of an item to be searched for in our list;
split(): The method split separates a string into a list based on the argument. If there is no argument as in this case the string is split using spaces.
Keyword  del  to delete an item according to its index.
Now let's try out some of these methods:
list = []
list.append(7) 		# -> [7]
list.append(5) 		# -> [7, 5]
list.insert(1,12) 		# [7, 12, 5]
list[0] = 4 		# -> [4, 12, 5]
list.remove(12) 		# [4, 5]
list.index(5) 		# prints 1
list.extend([1, 2, 3]) 	# [4, 5, 1, 2, 3]
del list[3] 		# [4, 5, 1, 3]

len() function:
The   len()  function lets you retrieve the size of your list:
list = [1, 2, 3]
len(list) # will print 3
Example2:
#guests = []
#guests.append([‘Joey’, ‘Martin’, ‘Mary’]) #[[‘Joey’, ‘Martin’, ‘Mary”]]  append() takes exactly one argument
#len(guests) #1
guests.extend([‘Joey’, ‘Martin’, ‘Mary’]) #[‘Joey’, ‘Martin’, ‘Mary”]
len(guests) #3

Replace Martin with John in the list:
guests.insert(1, ‘John’) #it will add john in index 1 and 
guests.remove(‘Martin’) #it will delete Martin from the list
guests.remove(‘Joey’) #it will delete Joey from the list

Dictionary:
Dictionaries are another type of object, similar to lists, but which will let you do this with a single variable! 
Indeed, a dictionary is a list of items organized via a system of keys. With a real dictionary, you look up a word to access its definition. 
In programming, this word corresponds to the key and the definition to the value associated with it. This is called a key-value pair. So, we could have:

Marion Weaver    Alberto Mendoza    Katharine Tyler    Isaac Steele
  10000                150            300                1800.74
Each key in a dictionary must be unique. Strings are generally used to define keys, but this is not a requirement

Declare a Dictionary:
Lists and dictionaries are declared in a similar way, except that a dictionary uses curly brackets instead of square brackets, and key-value pairs must be declared:
accounts = {'Marion Weaver': 10000, 'Alberto Mendoza': 150, 'Katharine Tyler': 300, 'Isaac Steele': 1800.74}
print(accounts['Alberto Mendoza']) # -> 150
The last line will print the value associated with the key "Alberto Mendoza" which is 150.

Manipulate the Items of a Dictionary
Here are the operations frequently carried out with dictionaries:
Access the value of an item
Add a new item (a new key-value pair)
Delete an item via its key
A value can be accessed or modified using the same notation as with lists. With dictionaries, unlike lists, this notation even lets you add items.
Let's see this in action in the following example:
accounts['Marion Weaver'] -= 2000 # I subtract 2000 from David's account
accounts['Kristian Roach'] = 1000 # I add a new individual in my dictionary
print(accounts['Kristian Roach']) # I print the value of Kristian's account
Finally, you can delete an item via the pop()  method by specifying the key of the item you want to delete.
accounts.pop('Alberto Mendoza') # deletes Alberto Mendoza from our dictionary
Finally, in the same way as with lists, you can use the   len()  function to see how your dictionary grows in size:
len(accounts) # -> 3

Tuples:  Immutable means it cannot be modified
The last type of collection we will look at is tuples. These are very similar to lists:
They are ordered objects, so we can access the different items stored in a tuple from their index.
You can store any kind of object in a tuple.
The main difference is that once a tuple has been declared, it cannot be modified. It is then said that it is immutable.
We can't modify a tuple? So what's the point of it?!
They might not seem to provide much benefit at first sight, but they can be used:
when you want to make sure that data is not modified within a program.
to return several values from a function. Indeed, we didn't address this point when we talked about functions, 
but it is possible to return several values... with a tuple!
to declare several variables in one line.

Declare a Tuple
Tuples are declared in a very similar way to lists, except parentheses are used instead of square brackets:
my_tuple = (1, 2, 3, 'a', 'b')
Manipulate Tuples
As explained above, tuples are ordered objects, so we can use indices to select the items of a tuple:
print(my_tuple[1]) # -> 2
print(my_tuple[4]) # -> 'b'
You can also declare several variables at the same time from a tuple:
a, b = (1, 'apple')
print(a) # -> 1
print(b) # -> 'apple'
My_tuple[2] = 4 # it will give an error.

Let's Recap:
In this chapter, you have learned all the basics of using Python’s different built-in "collection types":
Lists: an ordered, editable collection where each item is associated with an index
Dictionaries: an unordered, editable collection where each item is associated with a key
Tuples: an ordered, non-mutable collection, where each item is associated with an index
The most common actions performed with lists and dictionaries are:
Access an item
Add an item
Delete an item
Modify an item
Count the number of items stored
We can perform these different actions via methods.
The type to use depends on the task at hand. As you progress in your career, you will be able to better 
identify the structure that is best suited to your situation!

Conditional Structure:
Print Information if available: Example
name = input( 'What is your name, dear stranger?')
if len(name) > 0:
    print("Hello", name, "!")
else:
    print("Hello, world!")
It works well! Everything indented below the if is executed if the condition is true, otherwise the program runs everything indented below the else.
Using Booleans: 
In Python, to validate a condition, you use a special type (or object  ) called boolean. 
A Boolean variable can only contain two values: True or False. It's actually a pretty simple thing, but oh so useful!
In Python, the boolean can take the values True and False. Now see how to declare booleans in Python:
thisCourseIsGreat = True
itsAuthorIsVeryHumble = False
Easy, right?

Using Booleans: 
In Python, to validate a condition, you use a special type (or object  ) called boolean. 
A Boolean variable can only contain two values: True or False. It's actually a pretty simple thing, but oh so useful!
In Python, the boolean can take the values True and False. Now see how to declare booleans in Python:
thisCourseIsGreat = True
itsAuthorIsVeryHumble = False
Easy, right?
To get back to your if conditional structure, I think you'll understand, 
but it's absolutely necessary that what follows the if keyword results in a boolean. This can be done via:
a    True  or   False  value. For example,   if True : .
a boolean variable. For example,   if myVariable:  where   myVariable  is a boolean.
an expression that results in a boolean value, as in the example above.

For example:
weather = "The weather is great!"
weather.startswith("The weather") # -> True
startswith  is a method of the string class, which returns   True  when the string starts exactly with the string passed as a parameter;
False, if not. For example, you could use this expression to perform an action if a sentence begins with a particular word.

To produce Booleans, you can also use comparison operators.
Comparison Operators: As the name suggests, comparison operators are used to compare two values. There are six main ones:
==  equal to (two values are exactly the same)
!=  different from
<  less than
<=  less than or equal to
>  greater than
>=  greater than or equal to
Here are some examples with numeric variables:
2 == 2 # -> True
2 == 3 # -> False
4 != 4 # -> False
4!= 5 # -> True
1 < 2 # -> True
1 < 1 # -> False
1 <= 1 # -> True
3 > 4 # -> False
5 > 4 # -> True
5 >= 4 # -> True

Logical Operators
These operators will let you mix several Boolean values: specific Boolean values or expression results. There are three of them:
and: the AND operator.
The final result is true only when all expressions/values are true. 
For example, the result of  expression1 and expression2  will be True only if   expression1  is true AND expression2  is also true.

or: the OR operator.
The final result is true when at least one of the expressions/values is true. 
For example: the result of  expression1 or expression2   will be at True if   expression1  is true OR expression2  is true.

not: the NOT operator.
This simply reverses the result of the given expression. For example, the result of   not(expression)  is true when an expression  is false.

Here are some examples with the results shown as comments:
True and True # True
True and False # False
False and False # False
True or False # True
True or True # True
False or False # False
not(True) # False
not(False) # True

You can also mix more than two expressions/values:
True and True and True # True
True and True and False # False
True or False or False # True
False or False or False # False

As with numeric operations, logical operators respect the priorities of operations: the  not  operator is applied first, then the  and  operator, then the   or  operator. For example:
False or True and True # True
not(False) and True or False # True

You can also use parentheses to change the order:
(True and False) or True # True
not(True and False or not(True)) # True
The general form of a conditional if structure is   if condition:  where the condition can be either a boolean, or a variable of boolean type, or the result of an expression leading to a boolean result.

The  in  Operator
Another useful logical operator in Python is the   in  operator. This returns   True  when a value is found in a sequence (a string or a list);  False , if not.
For example:
myList = [4, 2, 3, 2, 10]
myStringList = ["a", "b", "c", "d"]
myString = "The weather is really good today!"

4 in myList # True
0 in myList # False
0 in myStringList # False
"c" in myStringList # True
"e" in myStringList # False
"weather" in myString # True
"really" in myString # True
"rain?" in myString # False

Manage a chain of conditions:
To grant a loan, a bank relies (among other things) on the status of its users' accounts. For example, a naive decision rule might be:
If the customer has more than $10,000 in their account, they are automatically approved for their loan.
If they have between $100 and $10,000, we need to manually approve their application.
Otherwise, the request is denied.
We could use two nested if statements, but Python can link several conditions thanks to the keyword   elif  (contraction of else and if). Here is the general form:

Here is the code corresponding to the example presented above:

account = input("What is your account balance?")
account = int(account) # transform the answer into an integer
if account >= 10000:
    print("Loan granted!")
elif account >= 100 and account < 10000:
    print("Loan in process of validation: under study")
else:
    print("Loan refused")

Let's Recap:
Conditions let you execute a block of code when a Boolean, variable, or expression is true (True).
Expressions use Boolean arithmetic, including logical operators and comparison operators.
You can apply several conditions with if/elif/else chains.

Loop:
A loop is a structure that lets you repeat one or more statements, without having to rewrite them each time. There are two types of loops (for and while), which will be explained shortly.
Loop a set number of times with the for loop
For loops are used when you know in advance how many times an action will be repeated.
However, unlike most other languages, in Python a for loop will necessarily iterate through a collection (list, dictionary, string, etc.).
The for Loop on a Collection
The conventional use of loops in Python is to directly use the different values of a collection. Here is an example with a list:
myList = [7,5,76,34]
for elt in myList:
    print(elt) #o/p 7, 5, 7, 6, 34

Let's take a detailed look at what has been achieved in the above code:
You have created a list:   myList, containing four items: 7, 2, 4, and 10.
The loop will store the first value of the list (in this case 7) in the   elt  variable.
Then, the whole block of code associated with the for loop (defined via indentation... again!) is run with   elt  holding the first value. Here, this block just involves printing   elt.
Once this is done,   elt  will take the second value of the list (in this case 2) and the block of code is re-run.
The loop will continue until all the values in your list have been stored in the    elt  variable and the statements for the loop have been executed for each of them.

The for Loop via an Iterative Integer Value
Quite often, you will find that you simply need to loop over a range of integer values, e.g. 0, 1, 2, 3….  
This is the conventional loop you see most often in languages like Javascript or C++.  
Because Python wants to loop over a collection, you need to create a collection containing your range of integer values.
To do this, you will use the   range(start, stop, step)  function, which will generate a collection of numbers according to three parameters:
start : the first number of the sequence.
stop  corresponds to the last number of the sequence, non-inclusive. The function will generate numbers from   start  to   stop-1.
step :  the step between each generated number.

Not all parameters are necessary. For example:    for i in range(0, 5, 1):
for i in range(0, 5, 1):
    print(i) # -> print from 0 to 4 by steps of 1 (end - 1)

for i in range(0, 5):
    print(i) # -> prints from 0 to 4 also (default step is 1)

for i in range(5):
    print(i) # -> prints from 0 to 4 also (default start is 0)

for i in range(0, 5, 2):
    print(i) # -> print 0, 2 then 4

The iterative variable can take any name. When iterating over an integer, we usually use values like   i ,   j , or k. 
Otherwise, it is better to use explicit names, as seen above ( elt being the abbreviation for item).
The for loop is perfectly suited when you have to perform an action a certain number of times known in advance or an action for each item of a collection. 
For all other cases, we can make a conditional loop: a loop that does not iterate through a collection, but according to a condition.

Loop according to a condition with the while loop:
The conditional loop is the while loop in Python.
As its name implies, the while loop will run as long as a condition is met. It is a kind of combination of a for loop and an if structure. 
The number of repetitions is not defined in advance, but via a condition to be fulfilled, as with an if. This is called a Conditional loop.
The syntax is as follows:
while expressionLogic:
    # block to execute
It can be interpreted as: as long as my logical expression is true, run the statement block.

Here's how it works:
The program checks that   expressionLogic  is equal to   True.
If this is the case, the indented statements following the   :   are run. Once this is done, we return to step one.
Otherwise, the program exits the loop without running the statements.
Try the example below:
numberTrees = 0
while numberTrees < 10:
    numberTrees += 1
    print("I planted", numberTrees, "trees")
print("I have a nice forest!")
I planted 1 trees 
I planted 2 trees
I planted 3 trees
I planted 4 trees
I planted 5 trees
I planted 6 trees
I planted 7 trees
I planted 8 trees
I planted 9 trees
I planted 10 trees
I have a nice forest!

Exercise:
Create a for loop that prints: “OpenClassroom is really great!” five times
for i in range(5):
    print("OpenClassrooms is really great!")
Change for loop to a while loop:
i = 0
while i < 5:
    print("OpenClassrooms is really great!")
    i += 1
OpenClassrooms is really great!
OpenClassrooms is really great!
OpenClassrooms is really great!
OpenClassrooms is really great!
OpenClassrooms is really great!

Skip some statements(continue, break):
Regardless of the type of loop, there will be situations where you will want to skip some of the iterations within your loop, or even terminate the loop prematurely.
For example, you want to repeat something 10 times, but skip (at least partially) when the value is 2 or 5. In Python, to force the start of the next loop iteration, use the keyword continue:
for i in range(10):
    # statements executed at each iteration
    print(i)
    if (i == 2) or (i == 5):
        print("Special case")
        continue
    # statements not executed if i == 2 or 5
    print("i != 2 & i != 5")
output:
0
i != 2 & i != 5
1
i != 2 & i != 5
2
Special case
3
i != 2 & i != 5
4
i != 2 & i != 5
5
Special case 
6
i != 2 & i != 5
7
i != 2 & i != 5
8
i != 2 & i != 5
9
i != 2 & i != 5

You can also decide to interrupt the loop, for example when looking for a particular item in a list. For this, you will use the   break  keyword.
basket = ["apple", "orange", "banana"]
for fruit in basket:
    if fruit == "orange":
        print("I have an orange!")
        break
O/P => I have an orange!

Let's Recap:
In this chapter, you have discovered two types of loops:
The loop for repeating an action a certain number of times, or according to a sequence: the for loop.
The loop that allows you to repeat an action as long as a condition is true: the while loop.
There is a common mistake that you must not make with the while loop: the infinite loop!
You can choose to skip certain loop iterations via the continue keyword.
The cycles of the loop can be interrupted via the break command.

Python Modules and Libraries:
Python Module:
A module is a Python file containing a set of predefined and operational functions, classes, and variables, which you can use as you wish in your code!
For example, if you are working on a problem involving geometry, you might need:
classes:
    Square—defined by the length of its side
    Triangle—defined by the length of its three sides
    Circle—defined by its radius
    Etc.
variables:
    Pi: constant necessary for calculating the area of a circle, equal to 3.1415...
    Phi: a constant that represents the golden ratio, equal to 1.6180...
functions:
    Area: takes as a parameter a geometrical object (square, triangle, etc.) and calculates its area
    Angles: takes a triangle as a parameter, and calculates its internal angles
    Etc.
Here is a simplified example of a geometry module:
'''
Module geometry.py
'''
# variables
pi = 3.14159265359
phi = 1.6180

# function that calculates the area
def area(obj):
    if type(obj) == square:
        return obj.a**2

# definitions of some classes
class square(object):
    def __init__(self,a):
        self.a = a

class triangle(object):
    def __init__(self,a,b,c):
        self.a = a
        self.b = b
        self.c = c

#To import a module, you will need the  import  keyword. Here is an example with our geometry module:
import geometry

#After doing this, you can use the different items defined in your module:
squa = geometry.square(4)
tri = geometry.triangle(3, 6, 5)
print(geometry.pi) # -> 3.14159265359
geometry.area(squa) # -> 16

All items included in the geometry module can be used via the   moduleName.  notation, i.e.,  moduleName.function()  or   moduleName.variable. 
So, in the above example, we can use  geometry.area()  or  geometry.pi. If you don't want to rewrite geometry every time, you have two other options:
Either give an alias to the name of your module, so you only have to write the alias:
import geometry as geo # we can now access geo.area() or geo.pi
Or, import specific functions that you can then use as native Python functions/variables (without the  .  notation):
from geometry import pi
print(pi) # -> 3.14159265359
A particular case of this last method is to import in one line all the objects contained in a module via the  *  notation. However, 
this is not the recommended method, in order to avoid, for example, conflicts between several modules that might have identical function names.
from geometry import *

When a Module is Not Enough: Packages
A package (sometimes called a library) is a collection, a set of Python modules. As you have seen above, a module is a Python file. 
A package is simply a folder containing several Python files (.py) and an additional file named   __init__.py. 
This differentiates a package from an ordinary folder containing only Python codes.
For example, you could have stored your geometry module in three different files instead of just one:
One for classes: classes.py
One for variables: variables.py
One for functions: functions.py

You will need to use the. operator to access the module after importing the package:
import geometry # import all the geometry package
print(geometry.variables.pi) # -> 3.1415...
squa = geometry.classes.square(4)
geometry.functions.area(squa) # -> 16

Or, you can also import only one module from the package:

import geometry.variables as var # import only what is defined in variables.py
print(var.pi) # -> 3.1415...
print(var.pi) # -> 3.1415...

Packages in Data Analysis
Packages are ubiquitous in data analysis with Python. Indeed, many packages have been created specifically to address the issues that this subject involves. As you progress, you will be required to:
manipulate your data to facilitate analysis.
make various relevant graphs representing the behavior of your data.
use statistical methods.
run machine learning algorithms of varying complexity.
etc.
To come back to your initial problem (having a square root function), there is, for example, the NumPy package which offers the necessary function—and many other things!
import numpy as np
np.sqrt(16) # -> 4.0

Let's Recap
In this chapter, together we have seen the basics of using modules and packages:
A module is a file containing Python code (.py extension) that can define functions, classes, and/or variables.
You can import any Python module via the import keyword.
To use a function class or a variable within a module, you must use the.  operator.
A package is a set of several Python modules.
There are many packages specifically created for data analysis.

Random Module
In Python, the random module contains several functions for generating random numbers or sequences of numbers.
Generate Random Numbers
First, import your random module. The name of the package in Python is... random:
	import random
The basic function for generating random numbers is called... random() as well (how original!). 
It will generate a random float between 0 and 1 (not including 0 or 1). Let's try a simple example by displaying three random numbers:

Absolutely! But the people who created the random package, fortunately, thought of everything. There are other functions that let you generate a random number in a given range:
uniform(a, b): will generate a random float between   a  and  b.
randint(a, b): as its name suggests, this one is similar to   uniform  except that the random number generated is an integer this time!

Choose Randomly From a List: Subsampling
As you already know, to select an item in a list, you have to select it via its index. If you want to select an item randomly from a list, 
a somewhat naive solution might be to draw the index randomly, and then use the random index to select the item. 
The random module goes a step further by offering a function that lets you make the selection directly from the list: the    choice  function.
liste = ['one', 'two', 'three', 'four', 'five']
for i in range(3):
    print(random.choice(liste)) #'one', 'four', 'three'
